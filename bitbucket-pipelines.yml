# Template docker-push

# This template allows you to build and push your docker image to a Docker Hub account.
# The workflow allows running tests, code linting and security scans on feature branches (as well as master).
# The docker image will be validated and pushed to the docker registry after the code is merged to master.

# Prerequisites: $DOCKERHUB_USERNAME, $DOCKERHUB_PASSWORD setup as deployment variables

image: atlassian/default-image:3

pipelines:
  default:
    - parallel:
        - step:
            name: Build and Test Api
            script:
              - IMAGE_NAME_API=$BITBUCKET_REPO_SLUG
              - docker build . --file Dockerfile --tag ${IMAGE_NAME_API}
            services:
              - docker
            caches:
              - docker
        - step:
            name: Lint the Dockerfile
            image: hadolint/hadolint:latest-debian
            script:
              - hadolint Dockerfile

  branches:
    main:
      - step:
          name: Build API
          script:
            - IMAGE_NAME_API=$BITBUCKET_REPO_SLUG
            - docker build . --file Dockerfile --tag ${IMAGE_NAME_API}
            - docker save ${IMAGE_NAME_API} --output "${IMAGE_NAME_API}.tar"
          services:
            - docker
          caches:
            - docker
          artifacts:
            - "*.tar"
      - step:
          name: Push Docker Image for API to Docker Hub
          script:
            - echo ${DOCKER_PASSWORD} | docker login --username "$DOCKER_USERNAME" --password-stdin
            - IMAGE_NAME_API=$BITBUCKET_REPO_SLUG
            - docker load --input "${IMAGE_NAME_API}.tar"
            - VERSION="prod-0.1.${BITBUCKET_BUILD_NUMBER}"
            - IMAGE_API="isadoraxavierr/${IMAGE_NAME_API}"
            - docker tag "${IMAGE_NAME_API}" "${IMAGE_API}:${VERSION}"
            - docker push "${IMAGE_API}:${VERSION}"
            - docker tag "${IMAGE_API}:${VERSION}" "${IMAGE_API}:latest"
            - docker push "${IMAGE_API}:latest"
          services:
            - docker
      - step:
          name: Run Database Migrations
          script:
            docker run --rm \
  -e DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}" \
  $DOCKER_USERNAME/${BITBUCKET_REPO_SLUG}:latest \
  bundle exec rails db:migrate
          services:
            - docker
      - step:
          name: Deploy Database na Azure
          script:
            - pipe: atlassian/azure-web-apps-containers-deploy:1.2.0
              variables:
                AZURE_APP_ID: ${AZURE_APP_ID_DB}
                AZURE_PASSWORD: ${AZURE_PASSWORD_DB}
                AZURE_TENANT_ID: ${AZURE_TENANT_ID_DB}
                AZURE_RESOURCE_GROUP: ${AZURE_RESOURCE_GROUP}
                AZURE_APP_NAME: ${AZURE_APP_NAME_DB}
                DOCKER_CUSTOM_IMAGE_NAME: "postgres:12.17"
          services:
            - docker
      - step:
          name: Deploy API na Azure
          deployment: Production
          script:
            - pipe: atlassian/azure-web-apps-containers-deploy:1.2.0
              variables:
                AZURE_APP_ID: ${AZURE_APP_ID}
                AZURE_PASSWORD: ${AZURE_PASSWORD}
                AZURE_TENANT_ID: ${AZURE_TENANT_ID}
                AZURE_RESOURCE_GROUP: ${AZURE_RESOURCE_GROUP}
                AZURE_APP_NAME: ${AZURE_APP_NAME_API}
                DOCKER_CUSTOM_IMAGE_NAME: isadoraxavierr/${BITBUCKET_REPO_SLUG}:latest
          services:
            - docker
